// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var user = User.FromJson(jsonString);

namespace LayoutTemplateWebApp.Models.QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class User
    {
        [JsonProperty("email")]
        public string Email { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("personName")]
        public string PersonName { get; set; }

        [JsonProperty("firstLastName")]
        public string FirstLastName { get; set; }

        [JsonProperty("secondLastName")]
        public string SecondLastName { get; set; }

        [JsonProperty("debt")]
        public long Debt { get; set; }

        [JsonProperty("employee")]
        public object Employee { get; set; }

        [JsonProperty("student")]
        public Student Student { get; set; }

        [JsonProperty("departments")]
        public object[] Departments { get; set; }

        [JsonProperty("schools")]
        public object[] Schools { get; set; }

        [JsonProperty("applicationRoles")]
        public ApplicationRole[] ApplicationRoles { get; set; }
    }

    public partial class ApplicationRole
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("applicationId")]
        public long ApplicationId { get; set; }

        [JsonProperty("applicationRoleName")]
        public string ApplicationRoleName { get; set; }

        [JsonProperty("applicationName")]
        public string ApplicationName { get; set; }
    }

    public partial class Student
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("isExemptFromPrintingCosts")]
        public bool IsExemptFromPrintingCosts { get; set; }

        [JsonProperty("degreeId")]
        public long DegreeId { get; set; }

        [JsonProperty("degreeName")]
        public string DegreeName { get; set; }
    }

    public partial class User
    {
        public static User FromJson(string json) => JsonConvert.DeserializeObject<User>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this User self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
